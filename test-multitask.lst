   1               		.file	"test-multitask.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	task_0
  13               	task_0:
  14               	.LFB6:
  15               		.file 1 "test-multitask.c"
   1:test-multitask.c **** #include <avr/io.h>
   2:test-multitask.c **** #include <util/delay.h>
   3:test-multitask.c **** #include <avr/interrupt.h>
   4:test-multitask.c **** 
   5:test-multitask.c **** #include <stdlib.h>
   6:test-multitask.c **** #include <inttypes.h>
   7:test-multitask.c **** 
   8:test-multitask.c **** #include "avr_kernel.h"
   9:test-multitask.c **** 
  10:test-multitask.c **** void task_0()
  11:test-multitask.c **** {
  16               		.loc 1 11 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LVL0:
  23               		.loc 1 11 0
  24 0000 8AE0      		ldi r24,lo8(10)
  25 0002 90E0      		ldi r25,0
  12:test-multitask.c ****     int i;
  13:test-multitask.c ****     for (i = 0; i < 10; ++i)
  14:test-multitask.c ****     {
  15:test-multitask.c ****         PINB = 1;
  26               		.loc 1 15 0
  27 0004 21E0      		ldi r18,lo8(1)
  28               	.LVL1:
  29               	.L4:
  30               		.loc 1 15 0 is_stmt 0 discriminator 2
  31 0006 23B9      		out 0x3,r18
  32               	.LVL2:
  33               	.LBB20:
  34               	.LBB21:
  35               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  36               		.loc 2 164 0 is_stmt 1 discriminator 2
  37 0008 E7EA      		ldi r30,lo8(24999)
  38 000a F1E6      		ldi r31,hi8(24999)
  39 000c 3197      		1: sbiw r30,1
  40 000e 01F4      		brne 1b
  41 0010 00C0      		rjmp .
  42 0012 0000      		nop
  43               	.LVL3:
  44 0014 0197      		sbiw r24,1
  45               	.LVL4:
  46               	.LBE21:
  47               	.LBE20:
  13:test-multitask.c ****     for (i = 0; i < 10; ++i)
  48               		.loc 1 13 0 discriminator 2
  49 0016 0097      		sbiw r24,0
  50 0018 01F4      		brne .L4
  16:test-multitask.c ****         _delay_ms(100);
  17:test-multitask.c ****     }
  18:test-multitask.c ****     while (1)
  19:test-multitask.c ****     {
  20:test-multitask.c ****         PINB = 1;
  51               		.loc 1 20 0
  52 001a C1E0      		ldi r28,lo8(1)
  53               	.LVL5:
  54               	.L5:
  55               		.loc 1 20 0 is_stmt 0 discriminator 1
  56 001c C3B9      		out 0x3,r28
  57               	.LVL6:
  58               	.LBB22:
  59               	.LBB23:
  60               		.loc 2 164 0 is_stmt 1 discriminator 1
  61 001e 87EA      		ldi r24,lo8(24999)
  62 0020 91E6      		ldi r25,hi8(24999)
  63 0022 0197      		1: sbiw r24,1
  64 0024 01F4      		brne 1b
  65 0026 00C0      		rjmp .
  66 0028 0000      		nop
  67               	.LBE23:
  68               	.LBE22:
  21:test-multitask.c ****         _delay_ms(100);
  22:test-multitask.c ****         yield();
  69               		.loc 1 22 0 discriminator 1
  70 002a 0E94 0000 		call yield
  71               	.LVL7:
  72 002e 00C0      		rjmp .L5
  73               		.cfi_endproc
  74               	.LFE6:
  76               	.global	task_1
  78               	task_1:
  79               	.LFB7:
  23:test-multitask.c **** //         for (i = 0; i < 300; ++i)
  24:test-multitask.c **** //         {
  25:test-multitask.c **** //             _delay_ms(1);
  26:test-multitask.c **** //              yield();
  27:test-multitask.c **** //         }
  28:test-multitask.c ****     }
  29:test-multitask.c **** }
  30:test-multitask.c **** 
  31:test-multitask.c **** void task_1()
  32:test-multitask.c **** {
  80               		.loc 1 32 0
  81               		.cfi_startproc
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
  86               	.LVL8:
  87               		.loc 1 32 0
  88 0030 8AE0      		ldi r24,lo8(10)
  89 0032 90E0      		ldi r25,0
  33:test-multitask.c ****     int i;
  34:test-multitask.c ****     for (i = 0; i < 10; ++i)
  35:test-multitask.c ****     {
  36:test-multitask.c ****         PINB = 2;
  90               		.loc 1 36 0
  91 0034 22E0      		ldi r18,lo8(2)
  92               	.LVL9:
  93               	.L10:
  94               		.loc 1 36 0 is_stmt 0 discriminator 2
  95 0036 23B9      		out 0x3,r18
  96               	.LVL10:
  97               	.LBB24:
  98               	.LBB25:
  99               		.loc 2 164 0 is_stmt 1 discriminator 2
 100 0038 E7EA      		ldi r30,lo8(24999)
 101 003a F1E6      		ldi r31,hi8(24999)
 102 003c 3197      		1: sbiw r30,1
 103 003e 01F4      		brne 1b
 104 0040 00C0      		rjmp .
 105 0042 0000      		nop
 106               	.LVL11:
 107 0044 0197      		sbiw r24,1
 108               	.LVL12:
 109               	.LBE25:
 110               	.LBE24:
  34:test-multitask.c ****     for (i = 0; i < 10; ++i)
 111               		.loc 1 34 0 discriminator 2
 112 0046 0097      		sbiw r24,0
 113 0048 01F4      		brne .L10
  37:test-multitask.c ****         _delay_ms(100);
  38:test-multitask.c ****     }
  39:test-multitask.c ****     while (1)
  40:test-multitask.c ****     {
  41:test-multitask.c ****         PINB = 2;
 114               		.loc 1 41 0
 115 004a C2E0      		ldi r28,lo8(2)
 116               	.LVL13:
 117               	.L11:
 118               		.loc 1 41 0 is_stmt 0 discriminator 1
 119 004c C3B9      		out 0x3,r28
 120               	.LVL14:
 121               	.LBB26:
 122               	.LBB27:
 123               		.loc 2 164 0 is_stmt 1 discriminator 1
 124 004e 87EA      		ldi r24,lo8(24999)
 125 0050 91E6      		ldi r25,hi8(24999)
 126 0052 0197      		1: sbiw r24,1
 127 0054 01F4      		brne 1b
 128 0056 00C0      		rjmp .
 129 0058 0000      		nop
 130               	.LBE27:
 131               	.LBE26:
  42:test-multitask.c ****         _delay_ms(100);
  43:test-multitask.c ****         yield();
 132               		.loc 1 43 0 discriminator 1
 133 005a 0E94 0000 		call yield
 134               	.LVL15:
 135 005e 00C0      		rjmp .L11
 136               		.cfi_endproc
 137               	.LFE7:
 139               	.global	task_2
 141               	task_2:
 142               	.LFB8:
  44:test-multitask.c **** //         for (i = 0; i < 200; ++i)
  45:test-multitask.c **** //         {
  46:test-multitask.c **** //             _delay_ms(1);
  47:test-multitask.c **** //            yield();
  48:test-multitask.c **** //         }
  49:test-multitask.c ****     }
  50:test-multitask.c **** }
  51:test-multitask.c **** 
  52:test-multitask.c **** void task_2()
  53:test-multitask.c **** {
 143               		.loc 1 53 0
 144               		.cfi_startproc
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
 149               	.LVL16:
 150               		.loc 1 53 0
 151 0060 8AE0      		ldi r24,lo8(10)
 152 0062 90E0      		ldi r25,0
  54:test-multitask.c ****     int i;
  55:test-multitask.c ****     for (i = 0; i < 10; ++i)
  56:test-multitask.c ****     {
  57:test-multitask.c ****         PINB = 4;
 153               		.loc 1 57 0
 154 0064 24E0      		ldi r18,lo8(4)
 155               	.LVL17:
 156               	.L15:
 157               		.loc 1 57 0 is_stmt 0 discriminator 2
 158 0066 23B9      		out 0x3,r18
 159               	.LVL18:
 160               	.LBB28:
 161               	.LBB29:
 162               		.loc 2 164 0 is_stmt 1 discriminator 2
 163 0068 E7EA      		ldi r30,lo8(24999)
 164 006a F1E6      		ldi r31,hi8(24999)
 165 006c 3197      		1: sbiw r30,1
 166 006e 01F4      		brne 1b
 167 0070 00C0      		rjmp .
 168 0072 0000      		nop
 169               	.LVL19:
 170 0074 0197      		sbiw r24,1
 171               	.LVL20:
 172               	.LBE29:
 173               	.LBE28:
  55:test-multitask.c ****     for (i = 0; i < 10; ++i)
 174               		.loc 1 55 0 discriminator 2
 175 0076 0097      		sbiw r24,0
 176 0078 01F4      		brne .L15
  58:test-multitask.c ****         _delay_ms(100);
  59:test-multitask.c ****     }
  60:test-multitask.c ****     while (1)
  61:test-multitask.c ****     {
  62:test-multitask.c ****         PINB = 4;
 177               		.loc 1 62 0
 178 007a C4E0      		ldi r28,lo8(4)
 179               	.LVL21:
 180               	.L16:
 181               		.loc 1 62 0 is_stmt 0 discriminator 1
 182 007c C3B9      		out 0x3,r28
 183               	.LVL22:
 184               	.LBB30:
 185               	.LBB31:
 186               		.loc 2 164 0 is_stmt 1 discriminator 1
 187 007e 87EA      		ldi r24,lo8(24999)
 188 0080 91E6      		ldi r25,hi8(24999)
 189 0082 0197      		1: sbiw r24,1
 190 0084 01F4      		brne 1b
 191 0086 00C0      		rjmp .
 192 0088 0000      		nop
 193               	.LBE31:
 194               	.LBE30:
  63:test-multitask.c ****         _delay_ms(100);
  64:test-multitask.c ****         yield();
 195               		.loc 1 64 0 discriminator 1
 196 008a 0E94 0000 		call yield
 197               	.LVL23:
 198 008e 00C0      		rjmp .L16
 199               		.cfi_endproc
 200               	.LFE8:
 202               	.global	task_3
 204               	task_3:
 205               	.LFB9:
  65:test-multitask.c **** //         for (i = 0; i < 125; ++i)
  66:test-multitask.c **** //         {
  67:test-multitask.c **** //             _delay_ms(1);
  68:test-multitask.c **** //            yield();
  69:test-multitask.c **** //         }
  70:test-multitask.c ****     }
  71:test-multitask.c **** }
  72:test-multitask.c **** 
  73:test-multitask.c **** void task_3()
  74:test-multitask.c **** {
 206               		.loc 1 74 0
 207               		.cfi_startproc
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
 212               	.LVL24:
 213               		.loc 1 74 0
 214 0090 8AE0      		ldi r24,lo8(10)
 215 0092 90E0      		ldi r25,0
  75:test-multitask.c ****     int i;
  76:test-multitask.c ****     for (i = 0; i < 10; ++i)
  77:test-multitask.c ****     {
  78:test-multitask.c ****         PINB = 8;
 216               		.loc 1 78 0
 217 0094 28E0      		ldi r18,lo8(8)
 218               	.LVL25:
 219               	.L20:
 220               		.loc 1 78 0 is_stmt 0 discriminator 2
 221 0096 23B9      		out 0x3,r18
 222               	.LVL26:
 223               	.LBB32:
 224               	.LBB33:
 225               		.loc 2 164 0 is_stmt 1 discriminator 2
 226 0098 E7EA      		ldi r30,lo8(24999)
 227 009a F1E6      		ldi r31,hi8(24999)
 228 009c 3197      		1: sbiw r30,1
 229 009e 01F4      		brne 1b
 230 00a0 00C0      		rjmp .
 231 00a2 0000      		nop
 232               	.LVL27:
 233 00a4 0197      		sbiw r24,1
 234               	.LVL28:
 235               	.LBE33:
 236               	.LBE32:
  76:test-multitask.c ****     for (i = 0; i < 10; ++i)
 237               		.loc 1 76 0 discriminator 2
 238 00a6 0097      		sbiw r24,0
 239 00a8 01F4      		brne .L20
  79:test-multitask.c ****         _delay_ms(100);
  80:test-multitask.c ****     }
  81:test-multitask.c ****     while (1)
  82:test-multitask.c ****     {
  83:test-multitask.c ****         PINB = 8;
 240               		.loc 1 83 0
 241 00aa C8E0      		ldi r28,lo8(8)
 242               	.LVL29:
 243               	.L21:
 244               		.loc 1 83 0 is_stmt 0 discriminator 1
 245 00ac C3B9      		out 0x3,r28
 246               	.LVL30:
 247               	.LBB34:
 248               	.LBB35:
 249               		.loc 2 164 0 is_stmt 1 discriminator 1
 250 00ae 87EA      		ldi r24,lo8(24999)
 251 00b0 91E6      		ldi r25,hi8(24999)
 252 00b2 0197      		1: sbiw r24,1
 253 00b4 01F4      		brne 1b
 254 00b6 00C0      		rjmp .
 255 00b8 0000      		nop
 256               	.LBE35:
 257               	.LBE34:
  84:test-multitask.c ****         _delay_ms(100);
  85:test-multitask.c ****         yield();
 258               		.loc 1 85 0 discriminator 1
 259 00ba 0E94 0000 		call yield
 260               	.LVL31:
 261 00be 00C0      		rjmp .L21
 262               		.cfi_endproc
 263               	.LFE9:
 265               		.section	.text.startup,"ax",@progbits
 266               	.global	main
 268               	main:
 269               	.LFB10:
  86:test-multitask.c **** //         for (i = 0; i < 225; ++i)
  87:test-multitask.c **** //         {
  88:test-multitask.c **** //             _delay_ms(1);
  89:test-multitask.c **** //            yield();
  90:test-multitask.c **** //         }
  91:test-multitask.c ****     }
  92:test-multitask.c **** }
  93:test-multitask.c **** 
  94:test-multitask.c **** 
  95:test-multitask.c **** int main ()
  96:test-multitask.c **** {
 270               		.loc 1 96 0
 271               		.cfi_startproc
 272               	/* prologue: function */
 273               	/* frame size = 0 */
 274               	/* stack size = 0 */
 275               	.L__stack_usage = 0
  97:test-multitask.c ****     // connect all LEDs to port pins
  98:test-multitask.c ****     DDRB = 0xFF;
 276               		.loc 1 98 0
 277 0000 8FEF      		ldi r24,lo8(-1)
 278 0002 84B9      		out 0x4,r24
  99:test-multitask.c ****     DDRC = 0xFF;
 279               		.loc 1 99 0
 280 0004 87B9      		out 0x7,r24
 100:test-multitask.c ****     DDRA = 0;
 281               		.loc 1 100 0
 282 0006 11B8      		out 0x1,__zero_reg__
 101:test-multitask.c ****     PORTA = 0xFF;
 283               		.loc 1 101 0
 284 0008 82B9      		out 0x2,r24
 102:test-multitask.c ****     PORTB = 0;
 285               		.loc 1 102 0
 286 000a 15B8      		out 0x5,__zero_reg__
 287               	.LVL32:
 103:test-multitask.c ****     
 104:test-multitask.c ****     uint8_t portb = 0;
 105:test-multitask.c **** 
 106:test-multitask.c ****     avr_kernel_init();
 288               		.loc 1 106 0
 289 000c 0E94 0000 		call avr_kernel_init
 290               	.LVL33:
 107:test-multitask.c ****     // task_0();
 108:test-multitask.c **** 
 109:test-multitask.c ****     int i;
 110:test-multitask.c ****     while (1)
 111:test-multitask.c ****     {
 112:test-multitask.c ****         PINB = 4;
 291               		.loc 1 112 0
 292 0010 14E0      		ldi r17,lo8(4)
 293               	.L24:
 294 0012 13B9      		out 0x3,r17
 295               	.LVL34:
 296 0014 C4EF      		ldi r28,lo8(-12)
 297 0016 D1E0      		ldi r29,lo8(1)
 298               	.LVL35:
 299               	.L25:
 300               	.LBB36:
 301               	.LBB37:
 302               		.loc 2 164 0
 303 0018 89EF      		ldi r24,lo8(249)
 304 001a 90E0      		ldi r25,hi8(249)
 305 001c 0197      		1: sbiw r24,1
 306 001e 01F4      		brne 1b
 307 0020 00C0      		rjmp .
 308 0022 0000      		nop
 309               	.LBE37:
 310               	.LBE36:
 113:test-multitask.c ****         for (i = 0; i < 500; ++i)
 114:test-multitask.c ****         {
 115:test-multitask.c ****             _delay_ms(1);
 116:test-multitask.c ****            yield();
 311               		.loc 1 116 0
 312 0024 0E94 0000 		call yield
 313               	.LVL36:
 314 0028 2197      		sbiw r28,1
 315               	.LVL37:
 113:test-multitask.c ****         for (i = 0; i < 500; ++i)
 316               		.loc 1 113 0
 317 002a 2097      		sbiw r28,0
 318 002c 01F4      		brne .L25
 319 002e 00C0      		rjmp .L24
 320               		.cfi_endproc
 321               	.LFE10:
 323               		.text
 324               	.Letext0:
 325               		.file 3 "/usr/lib/avr/include/stdint.h"
 326               		.file 4 "avr_kernel.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 test-multitask.c
     /tmp/ccZtb2Vj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccZtb2Vj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccZtb2Vj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccZtb2Vj.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccZtb2Vj.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccZtb2Vj.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccZtb2Vj.s:13     .text:0000000000000000 task_0
     /tmp/ccZtb2Vj.s:78     .text:0000000000000030 task_1
     /tmp/ccZtb2Vj.s:141    .text:0000000000000060 task_2
     /tmp/ccZtb2Vj.s:204    .text:0000000000000090 task_3
     /tmp/ccZtb2Vj.s:268    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
yield
avr_kernel_init
